generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("TIDB_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  processorSessions ProcessorSession[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProcessorSession {
  id        String   @id @default(cuid())
  userId    String
  status    String
  result    String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files     File[]
  user User @relation(fields: [userId], references: [id])
  @@index([userId])
}

model Questions {
    id                    String   @id @default(cuid())
    questionNumber        String   // "1", "2(a)", "3b(i)", etc.
    question              String   @db.Text
    type                  String   // "main", "subquestion", "subpart"
    parentQuestionNumber  String?  // Parent question identifier
    isMultipleChoice      Boolean  @default(false)
    imageDescription      String?  @db.Text
    answer                Json?    // Stores answer object (text or mcq format)
    pageNumber            Int
    semanticSummary       String   @db.Text // For search purposes
    
    // Store vector embedding as TEXT for TiDB compatibility
    vectorEmbedding       String?  @db.Text // Will be converted to VECTOR(1536) in TiDB
    
    // Link to source file
    fileId                String?
    file                  File?    @relation(fields: [fileId], references: [id])
    
    // Relation to mark schemes
    msQuestions           MsQuestions[]
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@index([questionNumber])
    @@index([type])
    @@index([fileId])
    @@index([isMultipleChoice])
}

model MsQuestions {
    id                    String   @id @default(cuid())
    questionNumber        String   // "1", "2(a)", "3b(i)" - matches original question
    markingCriteria       String   @db.Text // Detailed marking criteria/rubric
    maxMarks              Int      // Total marks available for this question
    markBreakdown         Json?    // Simple mark allocation (e.g., {"method": 2, "accuracy": 3})
    acceptableAnswers     Json?    // Array of acceptable answer variations
    keywords              Json?    // Key terms/concepts that should be present
    pageNumber            Int
    semanticSummary       String   @db.Text // For search purposes
    
    // Vector embedding for semantic matching with questions
    vectorEmbedding       String?  @db.Text // Will be converted to VECTOR(1536) in TiDB
    
    // Link to source file
    fileId                String?
    file                  File?    @relation(fields: [fileId], references: [id])
    
    // Link to corresponding question if available
    linkedQuestionId      String?
    linkedQuestion        Questions? @relation(fields: [linkedQuestionId], references: [id])
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@index([questionNumber])
    @@index([fileId])
    @@index([linkedQuestionId])
    @@map("MsQuestions")
}

model File {
    id        String   @id @default(cuid())
    userId    String
    name      String
    size      Int
    content   Bytes? @db.LongBlob
    type      String // "qsPaper" or "markScheme"
    mimetype  String
    
    // Add OCR and vector fields
    textContent       String? @db.Text               // Full extracted OCR text
    vectorEmbedding   String? @db.Text               // Document-level vector embedding
    
    // 1-to-1 relationship between question papers and mark schemes
    linkedMarkSchemeId    String? @unique // Only for question papers
    linkedMarkScheme      File?   @relation("QuestionToMarkScheme", fields: [linkedMarkSchemeId], references: [id])
    linkedQuestionPaper   File?   @relation("QuestionToMarkScheme")
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    processorSessionId String?
    processorSession   ProcessorSession? @relation(fields: [processorSessionId], references: [id])
    
    // Relation to extracted questions and mark schemes
    questions         Questions[]
    msQuestions       MsQuestions[]
    
    @@index([userId])
    @@index([mimetype])
    @@index([type])
    @@index([linkedMarkSchemeId])
}
 

model Account {
  id                       String  @id @default(cuid())
  userId                   String  // @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}